/***** This file contains automatically generated code ******
**
** The code in this file has been automatically generated by
**
**   sqlite/tool/mkkeywordhash.c
**
** The code in this file implements a function that determines whether
** or not a given identifier is really an SQL keyword.  The same thing
** might be implemented more directly using a hand-written hash table.
** But by using this automatically generated code, the size of the code
** is substantially reduced.  This is important for embedded applications
** on platforms with limited memory.
*/
/* Hash score: 274 */
static int keywordCode(const char *z, int n, int *pType, bool *pFlag){
  /* zText[] encodes 1190 bytes of keywords in 775 bytes */
  /*   BEFOREIGNOREGEXPLAINOUTERELEASENSITIVEACHARACTERAISELECTABLE       */
  /*   AVELSEIFETCHECKEYVARCHARANGETHENDECIMALTEREFERENCESCAPEXCEPT       */
  /*   RANSACTIONATURALIKEXISTSAVEPOINTEGERESIGNALIMITERATECASE           */
  /*   CONSTRAINTERSECTRIGGEREVOKESMALLINTOFFSETUNIQUERYBEGINSTEADD       */
  /*   ECLAREADSPECIFICASCADEFERRABLEFTBETWEENOTNULLOCALTIMESTAMPLAN      */
  /*   ALYZECASTARTCOMMITCURSORDERECURSIVEDESCRIBEDOUBLEGROUPDATEJOIN     */
  /*   DEXEDEFAULTMATCHAVINGLOBINARYPRAGMABORTPROCEDURENAMEVALUESQL       */
  /*   OOPARTITIONWHEREPEATWHILEWITHAFTEREPLACEANDEFERREDELETE            */
  /*   AUTOINCREMENTCALLCOLLATECOLUMNCONDITIONCONFLICTCONNECTCREATE       */
  /*   CROSSYSTEMCURRENT_DATECURRENT_TIMESTAMPRECISIONCURRENT_USER        */
  /*   ESTRICTDENSE_RANKDETERMINISTICDISTINCTDROPRIMARYFAILFLOATFROM      */
  /*   FUNCTIONGRANTIMMEDIATEINNERETURNINSENSITIVEINSERTISNULLOVER        */
  /*   IGHTROLLBACKROWSROW_NUMBERUNIONUSINGVIEWHENEVERANYBYINITIALLY      */
  static const char zText[774] = {
    'B','E','F','O','R','E','I','G','N','O','R','E','G','E','X','P','L','A',
    'I','N','O','U','T','E','R','E','L','E','A','S','E','N','S','I','T','I',
    'V','E','A','C','H','A','R','A','C','T','E','R','A','I','S','E','L','E',
    'C','T','A','B','L','E','A','V','E','L','S','E','I','F','E','T','C','H',
    'E','C','K','E','Y','V','A','R','C','H','A','R','A','N','G','E','T','H',
    'E','N','D','E','C','I','M','A','L','T','E','R','E','F','E','R','E','N',
    'C','E','S','C','A','P','E','X','C','E','P','T','R','A','N','S','A','C',
    'T','I','O','N','A','T','U','R','A','L','I','K','E','X','I','S','T','S',
    'A','V','E','P','O','I','N','T','E','G','E','R','E','S','I','G','N','A',
    'L','I','M','I','T','E','R','A','T','E','C','A','S','E','C','O','N','S',
    'T','R','A','I','N','T','E','R','S','E','C','T','R','I','G','G','E','R',
    'E','V','O','K','E','S','M','A','L','L','I','N','T','O','F','F','S','E',
    'T','U','N','I','Q','U','E','R','Y','B','E','G','I','N','S','T','E','A',
    'D','D','E','C','L','A','R','E','A','D','S','P','E','C','I','F','I','C',
    'A','S','C','A','D','E','F','E','R','R','A','B','L','E','F','T','B','E',
    'T','W','E','E','N','O','T','N','U','L','L','O','C','A','L','T','I','M',
    'E','S','T','A','M','P','L','A','N','A','L','Y','Z','E','C','A','S','T',
    'A','R','T','C','O','M','M','I','T','C','U','R','S','O','R','D','E','R',
    'E','C','U','R','S','I','V','E','D','E','S','C','R','I','B','E','D','O',
    'U','B','L','E','G','R','O','U','P','D','A','T','E','J','O','I','N','D',
    'E','X','E','D','E','F','A','U','L','T','M','A','T','C','H','A','V','I',
    'N','G','L','O','B','I','N','A','R','Y','P','R','A','G','M','A','B','O',
    'R','T','P','R','O','C','E','D','U','R','E','N','A','M','E','V','A','L',
    'U','E','S','Q','L','O','O','P','A','R','T','I','T','I','O','N','W','H',
    'E','R','E','P','E','A','T','W','H','I','L','E','W','I','T','H','A','F',
    'T','E','R','E','P','L','A','C','E','A','N','D','E','F','E','R','R','E',
    'D','E','L','E','T','E','A','U','T','O','I','N','C','R','E','M','E','N',
    'T','C','A','L','L','C','O','L','L','A','T','E','C','O','L','U','M','N',
    'C','O','N','D','I','T','I','O','N','C','O','N','F','L','I','C','T','C',
    'O','N','N','E','C','T','C','R','E','A','T','E','C','R','O','S','S','Y',
    'S','T','E','M','C','U','R','R','E','N','T','_','D','A','T','E','C','U',
    'R','R','E','N','T','_','T','I','M','E','S','T','A','M','P','R','E','C',
    'I','S','I','O','N','C','U','R','R','E','N','T','_','U','S','E','R','E',
    'S','T','R','I','C','T','D','E','N','S','E','_','R','A','N','K','D','E',
    'T','E','R','M','I','N','I','S','T','I','C','D','I','S','T','I','N','C',
    'T','D','R','O','P','R','I','M','A','R','Y','F','A','I','L','F','L','O',
    'A','T','F','R','O','M','F','U','N','C','T','I','O','N','G','R','A','N',
    'T','I','M','M','E','D','I','A','T','E','I','N','N','E','R','E','T','U',
    'R','N','I','N','S','E','N','S','I','T','I','V','E','I','N','S','E','R',
    'T','I','S','N','U','L','L','O','V','E','R','I','G','H','T','R','O','L',
    'L','B','A','C','K','R','O','W','S','R','O','W','_','N','U','M','B','E',
    'R','U','N','I','O','N','U','S','I','N','G','V','I','E','W','H','E','N',
    'E','V','E','R','A','N','Y','B','Y','I','N','I','T','I','A','L','L','Y',
  };
  static const unsigned short aHash[128] = {
     152, 158, 165, 132, 151,   0, 134, 103,   0,  95,   0, 104,  56,
     137,  78,  92,   0, 157, 166,  96, 160, 159,  77,   0,  53,  42,
      20, 162, 135,   0,  29, 117,  21,  12,   0,   0, 119, 124,   0,
      48,  14,   0,  59, 113, 143,   0, 161, 131,   0,   0,   0,   0,
     138,  69,   0,  86,  63, 164,   0, 128,   0,  87,  97,  22, 120,
     145,   0, 170, 142, 148, 169,  60,  37,  93,   0,  94, 118, 130,
      35, 121, 125,   0,   0,  31,  80, 116, 133, 129, 144,   7, 147,
     146,  83, 100,  16,  13, 112, 168,  27,   9, 163,  99, 155,  73,
      70,  46, 153,   0, 167,  65, 156,  84,   0,  50,   0,   0,  38,
      43, 109, 150,  75,   0,  19,  72,   0,  90, 154, 140,
  };
  static const unsigned short aNext[170] = {
       0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   1,   0,
       0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
      17,   0,   6,   0,  15,   0,   0,   0,   0,   0,  24,   0,   0,
      33,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
       0,   0,   0,  47,   0,   8,   0,   0,   0,   0,   0,   0,  54,
      64,   0,   0,   0,   4,   0,  39,   0,   0,   0,   0,  18,  45,
       0,   0,   0,   0,   0,  10,  76,   0,  34,   0,   0,  58,  55,
      61,  89,  41,  26,  57,   0,   0,  98,   0,  91,  52,   0,   0,
       0,   0,   0,   0, 107,  11,  32, 110,  62,   0,  88,   2,   0,
       0,  67,   0,   0,   0, 111,  23,   0,   5,   0,  30, 123,   3,
     127, 106,  82,   0,   0,   0, 126, 114,   0,   0,  25, 141,  79,
     122,   0, 136,  49,  71,   0,  74,  44,   0,   0,   0, 101,  85,
      36,  51,  81,  66,  68,  40, 105, 115, 149, 108, 139, 102,   0,
      28,
  };
  static const unsigned char aLen[170] = {
       6,   7,   3,   2,   6,   6,   7,   5,   3,   5,   7,  10,   2,
       4,   9,   4,   5,   6,   5,   5,   6,   4,   5,   5,   3,   7,
       5,   3,   4,   3,   7,   5,  10,   6,   6,  11,   6,   2,   7,
       4,   6,   9,   7,   8,   6,   5,   7,   4,  10,   9,   7,   6,
       8,   4,   6,   2,   3,   6,   5,   5,   7,   3,   7,   5,   8,
       2,   7,   3,  10,   4,   7,   7,   3,   2,   4,  14,   9,   4,
       7,   4,   5,   6,   6,   5,   9,   8,   4,   6,   5,   6,   4,
       7,   5,   7,   5,   6,   4,   6,   6,   5,   9,   6,   6,   3,
       4,   9,   5,   6,   5,   4,   5,   7,   3,   8,   6,  13,   2,
       4,   7,   6,   9,   8,   7,   6,   5,   6,  12,   4,   7,  17,
      12,   9,  12,   4,   8,  10,   4,  13,   2,   2,   8,   4,   7,
       4,   5,   4,   8,   5,   9,   5,   6,  11,   9,   6,   6,   4,
       5,   8,   4,  10,   3,   5,   5,   4,   8,   4,   3,   2,   9,
       3,
  };
  static const unsigned short int aOffset[170] = {
       0,   2,   2,   3,   6,  10,  13,  18,  20,  20,  24,  28,  28,
      37,  39,  39,  47,  50,  55,  58,  62,  62,  67,  70,  74,  77,
      83,  86,  88,  90,  92,  97, 101, 109, 114, 119, 124, 128, 129,
     135, 138, 143, 149, 155, 157, 162, 165, 172, 176, 183, 191, 197,
     203, 208, 211, 211, 214, 217, 220, 225, 228, 233, 235, 240, 244,
     248, 251, 252, 256, 264, 268, 274, 274, 274, 277, 280, 280, 293,
     295, 302, 304, 309, 315, 319, 323, 332, 332, 340, 346, 349, 355,
     357, 357, 363, 370, 374, 379, 382, 388, 393, 398, 405, 411, 416,
     418, 421, 430, 433, 439, 444, 448, 452, 459, 461, 468, 474, 476,
     487, 491, 498, 504, 513, 521, 528, 534, 538, 544, 552, 556, 556,
     556, 572, 581, 589, 592, 600, 606, 610, 616, 618, 623, 631, 634,
     641, 645, 650, 654, 662, 667, 676, 680, 686, 688, 697, 703, 709,
     712, 717, 725, 729, 729, 739, 744, 749, 752, 752, 760, 763, 765,
     770,
  };
  static const unsigned char aCode[170] = {
    TK_BEFORE,     TK_FOREIGN,    TK_FOR,        TK_OR,         TK_IGNORE,     
    TK_LIKE_KW,    TK_EXPLAIN,    TK_STANDARD,   TK_STANDARD,   TK_JOIN_KW,    
    TK_RELEASE,    TK_STANDARD,   TK_AS,         TK_EACH,       TK_ID,         
    TK_ID,         TK_RAISE,      TK_SELECT,     TK_TABLE,      TK_STANDARD,   
    TK_STANDARD,   TK_ELSE,       TK_STANDARD,   TK_CHECK,      TK_KEY,        
    TK_ID,         TK_STANDARD,   TK_STANDARD,   TK_THEN,       TK_END,        
    TK_ID,         TK_ALTER,      TK_REFERENCES, TK_ESCAPE,     TK_EXCEPT,     
    TK_TRANSACTION,TK_ACTION,     TK_ON,         TK_JOIN_KW,    TK_LIKE_KW,    
    TK_EXISTS,     TK_SAVEPOINT,  TK_ID,         TK_STANDARD,   TK_STANDARD,   
    TK_LIMIT,      TK_STANDARD,   TK_CASE,       TK_CONSTRAINT, TK_INTERSECT,  
    TK_TRIGGER,    TK_STANDARD,   TK_ID,         TK_INTO,       TK_OFFSET,     
    TK_OF,         TK_SET,        TK_UNIQUE,     TK_QUERY,      TK_BEGIN,      
    TK_INSTEAD,    TK_ADD,        TK_STANDARD,   TK_STANDARD,   TK_STANDARD,   
    TK_IF,         TK_CASCADE,    TK_ASC,        TK_DEFERRABLE, TK_JOIN_KW,    
    TK_BETWEEN,    TK_NOTNULL,    TK_NOT,        TK_NO,         TK_NULL,       
    TK_STANDARD,   TK_STANDARD,   TK_PLAN,       TK_ANALYZE,    TK_CAST,       
    TK_STANDARD,   TK_COMMIT,     TK_STANDARD,   TK_ORDER,      TK_RECURSIVE,  
    TK_STANDARD,   TK_DESC,       TK_ID,         TK_GROUP,      TK_UPDATE,     
    TK_JOIN,       TK_INDEXED,    TK_INDEX,      TK_DEFAULT,    TK_MATCH,      
    TK_HAVING,     TK_LIKE_KW,    TK_ID,         TK_PRAGMA,     TK_ABORT,      
    TK_STANDARD,   TK_RENAME,     TK_VALUES,     TK_STANDARD,   TK_STANDARD,   
    TK_STANDARD,   TK_WHERE,      TK_STANDARD,   TK_STANDARD,   TK_WITH,       
    TK_AFTER,      TK_REPLACE,    TK_AND,        TK_DEFERRED,   TK_DELETE,     
    TK_AUTOINCR,   TK_TO,         TK_STANDARD,   TK_COLLATE,    TK_STANDARD,   
    TK_STANDARD,   TK_CONFLICT,   TK_STANDARD,   TK_CREATE,     TK_JOIN_KW,    
    TK_STANDARD,   TK_CTIME_KW,   TK_ID,         TK_STANDARD,   TK_CTIME_KW,   
    TK_CTIME_KW,   TK_STANDARD,   TK_STANDARD,   TK_STANDARD,   TK_RESTRICT,   
    TK_STANDARD,   TK_STANDARD,   TK_STANDARD,   TK_IN,         TK_IS,         
    TK_DISTINCT,   TK_DROP,       TK_PRIMARY,    TK_FAIL,       TK_ID,         
    TK_FROM,       TK_STANDARD,   TK_STANDARD,   TK_IMMEDIATE,  TK_JOIN_KW,    
    TK_STANDARD,   TK_STANDARD,   TK_STANDARD,   TK_INSERT,     TK_ISNULL,     
    TK_STANDARD,   TK_JOIN_KW,    TK_ROLLBACK,   TK_STANDARD,   TK_STANDARD,   
    TK_ROW,        TK_UNION,      TK_USING,      TK_VIEW,       TK_STANDARD,   
    TK_WHEN,       TK_STANDARD,   TK_BY,         TK_INITIALLY,  TK_ALL,        
  };
  static const bool aFlag[170] = {
    false,         true,          true,          true,          false,         
    false,         true,          true,          true,          true,          
    true,          true,          true,          true,          true,          
    true,          false,         true,          true,          true,          
    true,          true,          true,          true,          false,         
    true,          true,          true,          true,          true,          
    true,          true,          true,          true,          true,          
    true,          false,         true,          true,          true,          
    true,          true,          true,          true,          true,          
    false,         true,          true,          true,          true,          
    true,          true,          true,          true,          false,         
    true,          true,          true,          false,         true,          
    false,         false,         true,          true,          true,          
    true,          false,         true,          false,         true,          
    true,          false,         true,          false,         true,          
    true,          true,          false,         true,          false,         
    true,          true,          true,          true,          true,          
    true,          true,          true,          true,          true,          
    true,          false,         true,          true,          true,          
    true,          false,         true,          true,          false,         
    true,          true,          true,          true,          true,          
    true,          true,          true,          true,          true,          
    false,         true,          true,          false,         true,          
    false,         true,          true,          true,          true,          
    true,          false,         true,          true,          true,          
    true,          true,          true,          true,          true,          
    true,          true,          true,          true,          false,         
    true,          true,          true,          true,          true,          
    true,          true,          true,          false,         true,          
    true,          true,          true,          true,          true,          
    true,          true,          true,          true,          false,         
    true,          true,          true,          true,          true,          
    true,          true,          true,          true,          true,          
    true,          true,          true,          false,         true,          
  };
  int i, j;
  const char *zKW;
  if( n>=2 ){
    i = ((charMap(z[0])*4) ^ (charMap(z[n-1])*3) ^ n) % 128;
    for(i=((int)aHash[i])-1; i>=0; i=((int)aNext[i])-1){
      if( aLen[i]!=n ) continue;
      j = 0;
      zKW = &zText[aOffset[i]];
#ifdef SQLITE_ASCII
      while( j<n && (z[j]&~0x20)==zKW[j] ){ j++; }
#endif
#ifdef SQLITE_EBCDIC
      while( j<n && toupper(z[j])==zKW[j] ){ j++; }
#endif
      if( j<n ) continue;
      testcase( i==0 ); /* BEFORE */
      testcase( i==1 ); /* FOREIGN */
      testcase( i==2 ); /* FOR */
      testcase( i==3 ); /* OR */
      testcase( i==4 ); /* IGNORE */
      testcase( i==5 ); /* REGEXP */
      testcase( i==6 ); /* EXPLAIN */
      testcase( i==7 ); /* INOUT */
      testcase( i==8 ); /* OUT */
      testcase( i==9 ); /* OUTER */
      testcase( i==10 ); /* RELEASE */
      testcase( i==11 ); /* ASENSITIVE */
      testcase( i==12 ); /* AS */
      testcase( i==13 ); /* EACH */
      testcase( i==14 ); /* CHARACTER */
      testcase( i==15 ); /* CHAR */
      testcase( i==16 ); /* RAISE */
      testcase( i==17 ); /* SELECT */
      testcase( i==18 ); /* TABLE */
      testcase( i==19 ); /* LEAVE */
      testcase( i==20 ); /* ELSEIF */
      testcase( i==21 ); /* ELSE */
      testcase( i==22 ); /* FETCH */
      testcase( i==23 ); /* CHECK */
      testcase( i==24 ); /* KEY */
      testcase( i==25 ); /* VARCHAR */
      testcase( i==26 ); /* RANGE */
      testcase( i==27 ); /* GET */
      testcase( i==28 ); /* THEN */
      testcase( i==29 ); /* END */
      testcase( i==30 ); /* DECIMAL */
      testcase( i==31 ); /* ALTER */
      testcase( i==32 ); /* REFERENCES */
      testcase( i==33 ); /* ESCAPE */
      testcase( i==34 ); /* EXCEPT */
      testcase( i==35 ); /* TRANSACTION */
      testcase( i==36 ); /* ACTION */
      testcase( i==37 ); /* ON */
      testcase( i==38 ); /* NATURAL */
      testcase( i==39 ); /* LIKE */
      testcase( i==40 ); /* EXISTS */
      testcase( i==41 ); /* SAVEPOINT */
      testcase( i==42 ); /* INTEGER */
      testcase( i==43 ); /* RESIGNAL */
      testcase( i==44 ); /* SIGNAL */
      testcase( i==45 ); /* LIMIT */
      testcase( i==46 ); /* ITERATE */
      testcase( i==47 ); /* CASE */
      testcase( i==48 ); /* CONSTRAINT */
      testcase( i==49 ); /* INTERSECT */
      testcase( i==50 ); /* TRIGGER */
      testcase( i==51 ); /* REVOKE */
      testcase( i==52 ); /* SMALLINT */
      testcase( i==53 ); /* INTO */
      testcase( i==54 ); /* OFFSET */
      testcase( i==55 ); /* OF */
      testcase( i==56 ); /* SET */
      testcase( i==57 ); /* UNIQUE */
      testcase( i==58 ); /* QUERY */
      testcase( i==59 ); /* BEGIN */
      testcase( i==60 ); /* INSTEAD */
      testcase( i==61 ); /* ADD */
      testcase( i==62 ); /* DECLARE */
      testcase( i==63 ); /* READS */
      testcase( i==64 ); /* SPECIFIC */
      testcase( i==65 ); /* IF */
      testcase( i==66 ); /* CASCADE */
      testcase( i==67 ); /* ASC */
      testcase( i==68 ); /* DEFERRABLE */
      testcase( i==69 ); /* LEFT */
      testcase( i==70 ); /* BETWEEN */
      testcase( i==71 ); /* NOTNULL */
      testcase( i==72 ); /* NOT */
      testcase( i==73 ); /* NO */
      testcase( i==74 ); /* NULL */
      testcase( i==75 ); /* LOCALTIMESTAMP */
      testcase( i==76 ); /* LOCALTIME */
      testcase( i==77 ); /* PLAN */
      testcase( i==78 ); /* ANALYZE */
      testcase( i==79 ); /* CAST */
      testcase( i==80 ); /* START */
      testcase( i==81 ); /* COMMIT */
      testcase( i==82 ); /* CURSOR */
      testcase( i==83 ); /* ORDER */
      testcase( i==84 ); /* RECURSIVE */
      testcase( i==85 ); /* DESCRIBE */
      testcase( i==86 ); /* DESC */
      testcase( i==87 ); /* DOUBLE */
      testcase( i==88 ); /* GROUP */
      testcase( i==89 ); /* UPDATE */
      testcase( i==90 ); /* JOIN */
      testcase( i==91 ); /* INDEXED */
      testcase( i==92 ); /* INDEX */
      testcase( i==93 ); /* DEFAULT */
      testcase( i==94 ); /* MATCH */
      testcase( i==95 ); /* HAVING */
      testcase( i==96 ); /* GLOB */
      testcase( i==97 ); /* BINARY */
      testcase( i==98 ); /* PRAGMA */
      testcase( i==99 ); /* ABORT */
      testcase( i==100 ); /* PROCEDURE */
      testcase( i==101 ); /* RENAME */
      testcase( i==102 ); /* VALUES */
      testcase( i==103 ); /* SQL */
      testcase( i==104 ); /* LOOP */
      testcase( i==105 ); /* PARTITION */
      testcase( i==106 ); /* WHERE */
      testcase( i==107 ); /* REPEAT */
      testcase( i==108 ); /* WHILE */
      testcase( i==109 ); /* WITH */
      testcase( i==110 ); /* AFTER */
      testcase( i==111 ); /* REPLACE */
      testcase( i==112 ); /* AND */
      testcase( i==113 ); /* DEFERRED */
      testcase( i==114 ); /* DELETE */
      testcase( i==115 ); /* AUTOINCREMENT */
      testcase( i==116 ); /* TO */
      testcase( i==117 ); /* CALL */
      testcase( i==118 ); /* COLLATE */
      testcase( i==119 ); /* COLUMN */
      testcase( i==120 ); /* CONDITION */
      testcase( i==121 ); /* CONFLICT */
      testcase( i==122 ); /* CONNECT */
      testcase( i==123 ); /* CREATE */
      testcase( i==124 ); /* CROSS */
      testcase( i==125 ); /* SYSTEM */
      testcase( i==126 ); /* CURRENT_DATE */
      testcase( i==127 ); /* DATE */
      testcase( i==128 ); /* CURRENT */
      testcase( i==129 ); /* CURRENT_TIMESTAMP */
      testcase( i==130 ); /* CURRENT_TIME */
      testcase( i==131 ); /* PRECISION */
      testcase( i==132 ); /* CURRENT_USER */
      testcase( i==133 ); /* USER */
      testcase( i==134 ); /* RESTRICT */
      testcase( i==135 ); /* DENSE_RANK */
      testcase( i==136 ); /* RANK */
      testcase( i==137 ); /* DETERMINISTIC */
      testcase( i==138 ); /* IN */
      testcase( i==139 ); /* IS */
      testcase( i==140 ); /* DISTINCT */
      testcase( i==141 ); /* DROP */
      testcase( i==142 ); /* PRIMARY */
      testcase( i==143 ); /* FAIL */
      testcase( i==144 ); /* FLOAT */
      testcase( i==145 ); /* FROM */
      testcase( i==146 ); /* FUNCTION */
      testcase( i==147 ); /* GRANT */
      testcase( i==148 ); /* IMMEDIATE */
      testcase( i==149 ); /* INNER */
      testcase( i==150 ); /* RETURN */
      testcase( i==151 ); /* INSENSITIVE */
      testcase( i==152 ); /* SENSITIVE */
      testcase( i==153 ); /* INSERT */
      testcase( i==154 ); /* ISNULL */
      testcase( i==155 ); /* OVER */
      testcase( i==156 ); /* RIGHT */
      testcase( i==157 ); /* ROLLBACK */
      testcase( i==158 ); /* ROWS */
      testcase( i==159 ); /* ROW_NUMBER */
      testcase( i==160 ); /* ROW */
      testcase( i==161 ); /* UNION */
      testcase( i==162 ); /* USING */
      testcase( i==163 ); /* VIEW */
      testcase( i==164 ); /* WHENEVER */
      testcase( i==165 ); /* WHEN */
      testcase( i==166 ); /* ANY */
      testcase( i==167 ); /* BY */
      testcase( i==168 ); /* INITIALLY */
      testcase( i==169 ); /* ALL */
      *pType = aCode[i];
      if (pFlag) {
        *pFlag = aFlag[i];
      }
      break;
    }
  }
  return n;
}
int sqlite3KeywordCode(const unsigned char *z, int n){
  int id = TK_ID;
  keywordCode((char*)z, n, &id, NULL);
  return id;
}
#define SQLITE_N_KEYWORD 170
